# Generated by Django 4.1.7 on 2023-05-24 11:17

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus', models.CharField(max_length=32)),
                ('samples', models.TextField()),
                ('abundances', models.TextField()),
                ('vars', models.IntegerField()),
            ],
            options={
                'db_table': 'genus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalfungiAbundance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'globalfungi_abundance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalfungiChemicaldata',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('total_c_content', models.FloatField()),
                ('total_n_content', models.FloatField()),
                ('organic_matter_content', models.FloatField()),
                ('ph', models.FloatField()),
                ('ph_method', models.CharField(max_length=64)),
                ('total_ca', models.FloatField()),
                ('total_p', models.FloatField()),
                ('total_k', models.FloatField()),
            ],
            options={
                'db_table': 'globalfungi_chemicaldata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalfungiContactmessage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'globalfungi_contactmessage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('release', models.TextField()),
                ('unite_version', models.TextField()),
                ('its_variants_count', models.BigIntegerField()),
                ('its1_raw_count', models.BigIntegerField()),
                ('its2_raw_count', models.BigIntegerField()),
                ('info', models.TextField()),
                ('citation', models.TextField()),
                ('date', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maillist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('email', models.TextField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'maillist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.TextField()),
                ('subject', models.TextField()),
                ('message', models.TextField()),
                ('processed', models.IntegerField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'messages',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_study', models.CharField(max_length=32)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('elevation', models.CharField(max_length=32)),
                ('continent', models.CharField(max_length=32)),
                ('country', models.TextField()),
                ('location', models.TextField()),
                ('sample_type', models.TextField()),
                ('biome', models.TextField(db_column='Biome')),
                ('biome_detail', models.TextField(db_column='Biome_detail')),
                ('mat_study', models.CharField(db_column='MAT_study', max_length=32)),
                ('map_study', models.CharField(db_column='MAP_study', max_length=32)),
                ('sample_name', models.TextField()),
                ('area_sampled', models.CharField(max_length=32)),
                ('area_gps', models.CharField(db_column='area_GPS', max_length=32)),
                ('number_of_subsamples', models.CharField(max_length=32)),
                ('sample_depth', models.CharField(max_length=32)),
                ('year_of_sampling', models.CharField(max_length=32)),
                ('month_of_sampling', models.CharField(max_length=32)),
                ('day_of_sampling', models.CharField(max_length=32)),
                ('sampling_info', models.TextField()),
                ('sample_description', models.TextField()),
                ('sequencing_platform', models.CharField(max_length=32)),
                ('target_gene', models.CharField(max_length=32)),
                ('extraction_dna_mass', models.CharField(db_column='extraction_DNA_mass', max_length=32)),
                ('extraction_dna_size', models.TextField(db_column='extraction_DNA_size')),
                ('extraction_dna_method', models.TextField(db_column='extraction_DNA_method')),
                ('primers', models.TextField()),
                ('primers_sequence', models.TextField()),
                ('ph', models.CharField(db_column='pH', max_length=32)),
                ('ph_method', models.CharField(db_column='pH_method', max_length=64)),
                ('organic_matter_content', models.CharField(max_length=32)),
                ('total_c_content', models.CharField(db_column='total_C_content', max_length=32)),
                ('total_n_content', models.CharField(db_column='total_N_content', max_length=32)),
                ('total_p', models.CharField(db_column='total_P', max_length=32)),
                ('total_ca', models.CharField(db_column='total_Ca', max_length=32)),
                ('total_k', models.CharField(db_column='total_K', max_length=32)),
                ('plants_dominant', models.TextField()),
                ('plants_all', models.TextField()),
                ('sample_info', models.TextField()),
                ('sample_seqid', models.TextField()),
                ('sample_barcode', models.TextField()),
            ],
            options={
                'db_table': 'metadata',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samples',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('add_date', models.CharField(max_length=10)),
                ('paper_id', models.CharField(max_length=32)),
                ('title', models.TextField()),
                ('year', models.CharField(max_length=4)),
                ('authors', models.TextField()),
                ('journal', models.TextField()),
                ('doi', models.TextField()),
                ('contact', models.TextField()),
                ('sample_name', models.TextField()),
                ('sample_type', models.TextField()),
                ('manipulated', models.CharField(max_length=5)),
                ('sample_description', models.TextField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('continent', models.CharField(max_length=32)),
                ('year_of_sampling', models.CharField(max_length=32)),
                ('biome', models.TextField(db_column='Biome')),
                ('sequencing_platform', models.CharField(max_length=32)),
                ('target_gene', models.CharField(max_length=32)),
                ('primers', models.TextField()),
                ('primers_sequence', models.TextField()),
                ('sample_seqid', models.TextField()),
                ('sample_barcode', models.TextField()),
                ('elevation', models.CharField(max_length=32)),
                ('mat', models.CharField(db_column='MAT', max_length=32)),
                ('map', models.CharField(db_column='MAP', max_length=32)),
                ('mat_study', models.CharField(db_column='MAT_study', max_length=32)),
                ('map_study', models.CharField(db_column='MAP_study', max_length=32)),
                ('biome_detail', models.TextField(db_column='Biome_detail')),
                ('country', models.TextField()),
                ('month_of_sampling', models.CharField(max_length=32)),
                ('day_of_sampling', models.CharField(max_length=32)),
                ('plants_dominant', models.TextField()),
                ('plants_all', models.TextField()),
                ('area_sampled', models.CharField(max_length=32)),
                ('number_of_subsamples', models.CharField(max_length=32)),
                ('sampling_info', models.TextField()),
                ('sample_depth', models.CharField(max_length=32)),
                ('extraction_dna_mass', models.CharField(db_column='extraction_DNA_mass', max_length=32)),
                ('extraction_dna_size', models.TextField(db_column='extraction_DNA_size')),
                ('extraction_dna_method', models.TextField(db_column='extraction_DNA_method')),
                ('total_c_content', models.CharField(db_column='total_C_content', max_length=32)),
                ('total_n_content', models.CharField(db_column='total_N_content', max_length=32)),
                ('organic_matter_content', models.CharField(max_length=32)),
                ('ph', models.CharField(db_column='pH', max_length=32)),
                ('ph_method', models.CharField(db_column='pH_method', max_length=64)),
                ('total_ca', models.CharField(db_column='total_Ca', max_length=32)),
                ('total_p', models.CharField(db_column='total_P', max_length=32)),
                ('total_k', models.CharField(db_column='total_K', max_length=32)),
                ('sample_info', models.TextField()),
                ('location', models.TextField()),
                ('area_gps', models.CharField(db_column='area_GPS', max_length=32)),
                ('its1_extracted', models.IntegerField(db_column='ITS1_extracted')),
                ('its2_extracted', models.IntegerField(db_column='ITS2_extracted')),
                ('its_total', models.IntegerField(db_column='ITS_total')),
            ],
            options={
                'db_table': 'samples',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplesToSh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.IntegerField()),
                ('shs', models.TextField(db_column='SHs')),
            ],
            options={
                'db_table': 'samples_to_sh',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sh', models.CharField(max_length=32)),
                ('samples', models.TextField()),
                ('abundances', models.TextField()),
                ('vars', models.IntegerField()),
            ],
            options={
                'db_table': 'sh',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('species', models.CharField(max_length=64)),
                ('samples', models.TextField()),
                ('abundances', models.TextField()),
                ('vars', models.IntegerField()),
            ],
            options={
                'db_table': 'species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('hash', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('contributor', models.TextField()),
                ('email', models.TextField()),
                ('affiliation_institute', models.TextField()),
                ('affiliation_country', models.TextField()),
                ('orcid', models.TextField(db_column='ORCID')),
                ('title', models.TextField()),
                ('authors', models.TextField()),
                ('year', models.TextField()),
                ('journal', models.TextField()),
                ('volume', models.TextField()),
                ('pages', models.TextField()),
                ('doi', models.TextField()),
                ('repository', models.TextField()),
                ('include', models.TextField()),
                ('coauthor', models.TextField()),
                ('email_confirmed', models.IntegerField()),
                ('submission_finished', models.IntegerField()),
                ('date', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'study',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sh', models.CharField(db_column='SH', max_length=32)),
                ('ecology', models.CharField(db_column='Ecology', max_length=64)),
                ('kingdom', models.CharField(db_column='Kingdom', max_length=64)),
                ('phylum', models.CharField(db_column='Phylum', max_length=64)),
                ('class_field', models.CharField(db_column='Class', max_length=64)),
                ('order', models.CharField(db_column='Order', max_length=64)),
                ('family', models.CharField(db_column='Family', max_length=64)),
                ('genus', models.CharField(db_column='Genus', max_length=64)),
                ('species', models.CharField(db_column='Species', max_length=64)),
                ('genus_id', models.IntegerField()),
                ('species_id', models.IntegerField()),
                ('sh_id', models.IntegerField(db_column='SH_id')),
            ],
            options={
                'db_table': 'taxonomy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Traffic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.IntegerField()),
                ('category', models.CharField(blank=True, max_length=32, null=True)),
                ('value', models.CharField(blank=True, max_length=64, null=True)),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'traffic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(max_length=32)),
                ('samples', models.TextField()),
                ('abundances', models.TextField()),
                ('marker', models.CharField(max_length=4)),
                ('sh', models.IntegerField(db_column='SH')),
                ('species', models.IntegerField()),
                ('genus', models.IntegerField()),
                ('sequence', models.TextField()),
            ],
            options={
                'db_table': 'variants',
                'managed': False,
            },
        ),
    ]
