# Generated by Django 4.1.7 on 2023-05-24 11:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import globalfungi.models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('globalfungi', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChemicalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_c_content', models.FloatField()),
                ('total_n_content', models.FloatField()),
                ('organic_matter_content', models.FloatField()),
                ('ph', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('ph_method', models.CharField(max_length=64)),
                ('total_ca', models.FloatField()),
                ('total_p', models.FloatField()),
                ('total_k', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DatabaseReleaseInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the GlobalFungi database.', max_length=100)),
                ('version', models.CharField(help_text='Version of the GlobalFungi database following semantic versioning.', max_length=20, validators=[django.core.validators.RegexValidator('^\\d+\\.\\d+\\.\\d+$')])),
                ('release', models.CharField(help_text='Release version.', max_length=20, validators=[django.core.validators.RegexValidator('^\\d+\\.\\d+\\.\\d+$')])),
                ('unite_version', models.CharField(help_text='UNITE version used in the GlobalFungi database.', max_length=20, validators=[django.core.validators.RegexValidator('^\\d+\\.\\d+\\.\\d+$')])),
                ('its_variants_count', models.BigIntegerField(help_text='Count of ITS variants in the GlobalFungi database.')),
                ('its1_raw_count', models.BigIntegerField(help_text='Raw count of ITS1 in the GlobalFungi database.')),
                ('its2_raw_count', models.BigIntegerField(help_text='Raw count of ITS2 in the GlobalFungi database.')),
                ('details', models.TextField(help_text='Detailed information about the GlobalFungi database release.')),
                ('citation', models.TextField(help_text='Citation for the GlobalFungi database.')),
                ('date', models.DateField(help_text='Release date of the GlobalFungi database.')),
            ],
            options={
                'db_table': 'info',
            },
        ),
        migrations.CreateModel(
            name='GeoData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('continent', models.CharField(choices=[(globalfungi.models.Continent['AFRICA'], 'Africa'), (globalfungi.models.Continent['ANTARCTICA'], 'Antarctica'), (globalfungi.models.Continent['ASIA'], 'Asia'), (globalfungi.models.Continent['AUSTRALIA'], 'Australia'), (globalfungi.models.Continent['EUROPE'], 'Europe'), (globalfungi.models.Continent['NORTH_AMERICA'], 'North America'), (globalfungi.models.Continent['SOUTH_AMERICA'], 'South America'), (globalfungi.models.Continent['ATLANTIC_OCEAN'], 'Atlantic Ocean'), (globalfungi.models.Continent['ARCTIC_OCEAN'], 'Arctic Ocean'), (globalfungi.models.Continent['INDIAN_OCEAN'], 'Indian Ocean'), (globalfungi.models.Continent['PACIFIC_OCEAN'], 'Pacific Ocean'), (globalfungi.models.Continent['SOUTHERN_OCEAN'], 'Southern Ocean')], max_length=32)),
                ('location', models.TextField()),
                ('area_gps', models.FloatField()),
                ('country', django_countries.fields.CountryField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalFungiUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('orcid', models.CharField(max_length=19, unique=True, validators=[django.core.validators.RegexValidator('^\\d{4}-\\d{4}-\\d{4}-\\d{4}$', 'Enter a valid ORCID. Format: 0000-0000-0000-0000')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=128)),
                ('affiliation_institute', models.CharField(max_length=128)),
                ('is_contributor', models.BooleanField(default=False)),
                ('role', models.CharField(blank=True, choices=[('undergraduate', 'Undergraduate Student'), ('master', 'Master Student'), ('phd', 'PhD Student'), ('researcher', 'Researcher'), ('other', 'Other')], max_length=14, null=True)),
                ('other_role', models.CharField(blank=True, max_length=50, null=True)),
                ('field_of_study', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='globalfungi_user_set', related_query_name='globalfungi_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='globalfungi_user_set', related_query_name='globalfungi_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('paper_id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('year', models.DateField()),
                ('authors', models.TextField()),
                ('journal', models.TextField()),
                ('doi', models.TextField()),
                ('contact', models.EmailField(max_length=254)),
                ('mat_study', models.FloatField()),
                ('map_study', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('add_date', models.DateField()),
                ('sample_info', models.TextField()),
                ('chemical_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.chemicaldata')),
                ('geodata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.geodata')),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.paper')),
            ],
        ),
        migrations.CreateModel(
            name='SamplingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_name', models.TextField()),
                ('sample_type', models.CharField(choices=[(globalfungi.models.SampleType['SOIL'], 'soil'), (globalfungi.models.SampleType['RHIZOSPHERE_SOIL'], 'rhizosphere soil'), (globalfungi.models.SampleType['LITTER'], 'litter'), (globalfungi.models.SampleType['TOPSOIL'], 'topsoil'), (globalfungi.models.SampleType['DEADWOOD'], 'deadwood'), (globalfungi.models.SampleType['LICHEN'], 'lichen'), (globalfungi.models.SampleType['SHOOT'], 'shoot'), (globalfungi.models.SampleType['ROOT'], 'root'), (globalfungi.models.SampleType['AIR'], 'air'), (globalfungi.models.SampleType['DUST'], 'dust'), (globalfungi.models.SampleType['WATER'], 'water'), (globalfungi.models.SampleType['SEDIMENT'], 'sediment'), (globalfungi.models.SampleType['FUNGAL_SPOROCARP'], 'fungal sporocarp')], max_length=32)),
                ('manipulated', models.BooleanField()),
                ('sample_description', models.TextField()),
                ('date_of_sampling', models.DateField()),
                ('area_sampled', models.FloatField()),
                ('number_of_subsamples', models.PositiveIntegerField()),
                ('sampling_info', models.TextField()),
                ('sample_depth', models.FloatField()),
                ('mat', models.FloatField()),
                ('map', models.FloatField()),
                ('sample_seqid', models.TextField()),
                ('sample_barcode', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SequencingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequencing_platform', models.CharField(choices=[(globalfungi.models.SequencingPlatform['ILLUMINA'], 'Illumina'), (globalfungi.models.SequencingPlatform['ROCH454'], '454Roche'), (globalfungi.models.SequencingPlatform['PACBIO'], 'PacBio'), (globalfungi.models.SequencingPlatform['IONTORRENT'], 'IonTorrent'), (globalfungi.models.SequencingPlatform['SOLID'], 'SOLiD'), (globalfungi.models.SequencingPlatform['OXFORDNANOPORE'], 'Oxford Nanopore')], max_length=32)),
                ('target_gene', models.CharField(choices=[(globalfungi.models.TargetGene['ITS1'], 'ITS1'), (globalfungi.models.TargetGene['ITS2'], 'ITS2'), (globalfungi.models.TargetGene['ITSBOTH'], 'ITSboth')], max_length=32)),
                ('primers', models.TextField()),
                ('primers_sequence', models.TextField()),
                ('extraction_dna_mass', models.FloatField()),
                ('extraction_dna_size', models.TextField()),
                ('extraction_dna_method', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SubmittedStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('authors', models.TextField()),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2099)])),
                ('journal', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^\\w+$', 'Enter a valid journal name. No special characters allowed.')])),
                ('volume', models.CharField(max_length=30)),
                ('pages', models.CharField(max_length=100)),
                ('doi', models.TextField()),
                ('repository', models.TextField()),
                ('allowed_to_show', models.BooleanField(default=False)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='globalfungi.globalfungiuser')),
            ],
            options={
                'db_table': 'study',
            },
        ),
        migrations.CreateModel(
            name='TaxonomyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ecology', models.CharField(blank=True, max_length=64, null=True)),
                ('kingdom', models.CharField(blank=True, max_length=64, null=True)),
                ('phylum', models.CharField(blank=True, max_length=64, null=True)),
                ('classis', models.CharField(blank=True, max_length=64, null=True)),
                ('order', models.CharField(blank=True, max_length=64, null=True)),
                ('family', models.CharField(blank=True, max_length=64, null=True)),
                ('genus', models.CharField(blank=True, max_length=64, null=True)),
                ('species', models.CharField(blank=True, max_length=64, null=True)),
                ('species_hypothesis', models.CharField(blank=True, max_length=32, null=True)),
                ('biome', models.CharField(choices=[(globalfungi.models.Biome['AQUATIC'], 'aquatic'), (globalfungi.models.Biome['DESERT'], 'desert'), (globalfungi.models.Biome['GRASSLAND'], 'grassland'), (globalfungi.models.Biome['FOREST'], 'forest'), (globalfungi.models.Biome['TUNDRA'], 'tundra'), (globalfungi.models.Biome['CROPLAND'], 'cropland'), (globalfungi.models.Biome['WETLAND'], 'wetland'), (globalfungi.models.Biome['WOODLAND'], 'woodland'), (globalfungi.models.Biome['SHRUBLAND'], 'shrubland'), (globalfungi.models.Biome['MANGROVE'], 'mangrove'), (globalfungi.models.Biome['ANTHROPOGENIC'], 'anthropogenic')], max_length=32)),
                ('biome_detail', models.TextField()),
                ('plants_dominant', models.TextField(blank=True, null=True)),
                ('plants_all', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VariantsData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('its1_extracted', models.IntegerField(blank=True, null=True)),
                ('its2_extracted', models.IntegerField(blank=True, null=True)),
                ('its_total', models.IntegerField()),
            ],
        ),
        migrations.DeleteModel(
            name='Genus',
        ),
        migrations.DeleteModel(
            name='GlobalfungiAbundance',
        ),
        migrations.DeleteModel(
            name='GlobalfungiChemicaldata',
        ),
        migrations.DeleteModel(
            name='GlobalfungiContactmessage',
        ),
        migrations.DeleteModel(
            name='Info',
        ),
        migrations.DeleteModel(
            name='Messages',
        ),
        migrations.DeleteModel(
            name='Metadata',
        ),
        migrations.DeleteModel(
            name='Samples',
        ),
        migrations.DeleteModel(
            name='SamplesToSh',
        ),
        migrations.DeleteModel(
            name='Sh',
        ),
        migrations.DeleteModel(
            name='Species',
        ),
        migrations.DeleteModel(
            name='Study',
        ),
        migrations.DeleteModel(
            name='Taxonomy',
        ),
        migrations.DeleteModel(
            name='Traffic',
        ),
        migrations.DeleteModel(
            name='Variants',
        ),
        migrations.AlterModelOptions(
            name='maillist',
            options={},
        ),
        migrations.AddField(
            model_name='sample',
            name='sampling_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.samplingdata'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sequencing_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.sequencingdata'),
        ),
        migrations.AddField(
            model_name='sample',
            name='taxonomy_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.taxonomydata'),
        ),
        migrations.AddField(
            model_name='sample',
            name='variants_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='globalfungi.variantsdata'),
        ),
    ]
